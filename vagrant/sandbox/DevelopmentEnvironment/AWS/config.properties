# README:
#
# A superset of properties are documented below. Order/Position in this file is
# irrelevant. If a property is defined more than once, the last one wins.
# Properties are programmatically updated in place if defined and appended to
# the end of the file if not yet defined.

# Required Properties
# ===================

# Vagrant Box
# -----------
# The vagrant box to use. See https://app.vagrantup.com/bento for other 'bento'
# boxes, or https://app.vagrantup.com/boxes/search for a broader search.
development.box=dummy

# OS Family
# ---------
# The OS family for the development.box
development.box.os.family=linux

# Package Manager
# ---------------
# The package manager. Must be a valid package manager for the development.box
# and must have a set of supporting scriptlets the 
development.box.packagemanager=yum

# Optional Properties
# ===================

# CI/CD Target Switches
# ---------------------
# Globally enable (Y) or disable (N) CI/CD targets.
# Each repo's CI/CD targets can be configured to override these properties. Some
# repos may not support all CI/CD targets. Valid values are 'Y' or 'N'.
# Undefined is interpreted as 'Y'.
#development.provision.build=N
#development.provision.env=N
#development.provision.test=N
#development.provision.bundle=N
#development.provision.deposit=N
#development.provision.deploy=N
#development.provision.clean=N

# Repos
# -------------------------
# Each repo included should define the following properties:
#
# IMPORTANT: Replace all dashes ('-') with dots in <repo>. For example,
#            'indy-sdk', becomes 'indy.sdk' in this properties file.
#
# Example superset of properties:
#

# Skip?
# ~~~~~
# Do not include <repo> in your development environment?
#development.repos.<repo>.skipped=[Y|N]

# Path
# ~~~~
# The full path to the cloned repo on your workstation. Leave this blank or
# undefined and define a development.repos.<repo>.url to have the Vagrantfile
# clone the repo for you.
#development.repos.<repo>.path=<path to cloned repo directory>

# Private Key (git)
# ~~~~
# The private key git uses to manage the <repo> defined in the Path property
# path expansion will be performed. Therefore, you can enter something like:
# ~/.ssh/id_rsa
#development.repos.<repo>.git.private.key=<path to the private key>

# URL
# ~~~~
# Where to clone a copy of the repository. You will be prompted for a username if
# the URL contains "<USERNAME>".
#development.repos.<repo>.url=<forked repo url with '<USERNAME>' in it>

# Branch
# ~~~~~~
# The branch to checkout before running CI/CD targets
#development.repos.<repo>.branch=<branch>

# Dependencies
# ~~~~~~~~~~~~
# A comma separated list of repos that must exercise it's CI/CD target before
# this repo exercises it's CI/CD target.
#development.repos.<repo>.deps=<comma separated list of dependency <repo>s >

# CI/CD Target
# ~~~~~~~~~~~~~~~~~~
# Each repository can target a particular state during provisioning
# Targets are ordered as follows; the default being the last target in the
# list.
#
# pre
# build
# test
# bundle
# deposit
# deploy
# clean
# post
#
# All targets that preceed a repo's configured target will be executed unless a
# target is disabled in the repo's provision properties
# (development.repos.<repo>.provision.*) ...
#
#   development.repos.<repo>.provision.<target>=N
#
# ... or the global provision properties (development.provision.*) ...
#
#   development.provision.<target>=N
#
#development.repos.<repo>.provision.target=<target>

# CI/CD Target Overrides
# If all provision targets are set to 'N' (disabled), effectively the only thing
# that is done is the source is shared in the Vagrant VM. This may be useful if
# you only need access to one or more source files found in a repo
# (i.e. ci/indy_pool.dockerfile in indy-sdk repo)
# ~~~~~~~~~~~~~~~~~~~~~~
#development.repos.<repo>.provision.build=N
#development.repos.<repo>.provision.env=N
#development.repos.<repo>.provision.test=N
#development.repos.<repo>.provision.bundle=N
#development.repos.<repo>.provision.deposit=N
#development.repos.<repo>.provision.deploy=N
#development.repos.<repo>.provision.clean=N

# Control how `vagrant rsync-auto` behaves for a given repository.
#
# The `vagrant rsync` and `vagrant rsync-auto` commands can be used to force a
# resync and to automatically resync when changes occur in the filesystem on the
# vagrant host. Without running these commands, Vagrant only syncs the folders on
# `vagrant up` or `vagrant reload`.
#
# If set to 'N', the file/folder rsynced during vagrant provisioning will only
# resync on `vagrant up` or `vagrant reload`. In other words, when `vagrant
# rsync-auto` is running and changes are made in the given <repo> on the vagrant
# host, they will NOT be rsynced to the vagrant VM. The only way the changes will
# be synced to the VM will be on `vagrant up` or `vagrant reload`. This is useful
# if you want to build a repo from source during initial provisioning and do not
# want to lose those binaries when `vagrant rsync-auto` is started on the vagrant
# host and an "initial" one-way rsync is performed by rsync-auto. A one-way rsync
# to the vagrant VM deletes everything in the shared folder on the vagrant VM
# before the contents of the folder on the vagrant host are copied to the vagrant
# VM.
#
# Defaults to "Y" when not defined for a given <repo>.
#development.repos.<repo>.rsync.auto=N

# A complete example: Build and test sovrin-self-serve artifacts
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The following configuration will build indy-sdk and then build and test
# sovrin-self-serve. sovrin-self-serve tests require libindy.so and a pool of
# validator nodes. The indy-sdk repo provides both libindy.so and a docker
# container (indy_pool) running a 4 validator node cluster. The provision targets
# (build, env, test, bundle, deposit, deploy and clean) are explicitly configured
# for the sovrin-self-serve repo in order to illustrate flexibility in
# configuring provision targets on a repo-by-repo basis. It is not intended to be
# a real-world example.
#
# Note the following:
# 
# 1. development.repos.sovrin.self.serve.deps=indy-sdk will cause indy-sdk to 
#    run to it's provision target (build) before the sovrin-self-serve repo runs
#    to it's target (post).
# 2. "post" (the last CI/CD target in the list) is the default provision target
#    for the sovrin-self-serve repo, because the provision target is undefined.
# 3. Provision targets deposit, deploy, and clean will be skipped, because they
#    are explicitly set to 'N'.

# Sovrin Self Serve
development.repos.sovrin.self.serve.skipped=N
development.repos.sovrin.self.serve.path=
development.repos.sovrin.self.serve.url=https://gitlab.corp.evernym.com/<USERNAME>/sovrin-self-serve.git
development.repos.sovrin.self.serve.git.private.key=~/.ssh/id_rsa
development.repos.sovrin.self.serve.branch=master
development.repos.sovrin.self.serve.deps=indy-sdk
development.repos.sovrin.self.serve.provision.target=test
development.repos.sovrin.self.serve.provision.build=Y
development.repos.sovrin.self.serve.provision.env=Y
development.repos.sovrin.self.serve.provision.test=Y
development.repos.sovrin.self.serve.provision.bundle=N
development.repos.sovrin.self.serve.provision.deposit=N
development.repos.sovrin.self.serve.provision.deploy=N
development.repos.sovrin.self.serve.provision.clean=N
development.repos.sovrin.self.serve.rsync.auto=Y

# Indy SDK
development.repos.indy.sdk.skipped=N
development.repos.indy.sdk.path=
development.repos.indy.sdk.url=https://github.com/<USERNAME>/indy-sdk.git
development.repos.indy.sdk.git.private.key=~/.ssh/id_rsa
development.repos.indy.sdk.branch=rc
development.repos.indy.sdk.provision.target=test
development.repos.indy.sdk.provision.build=Y
development.repos.indy.sdk.provision.env=Y
development.repos.indy.sdk.provision.test=Y
development.repos.indy.sdk.provision.bundle=N
development.repos.indy.sdk.provision.deposit=N
development.repos.indy.sdk.provision.deploy=N
development.repos.indy.sdk.provision.clean=N
development.repos.indy.sdk.rsync.auto=N
